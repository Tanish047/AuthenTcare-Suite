#!/usr/bin/env node

import fs from 'fs/promises';
import path from 'path';

/**
 * Generate INDEX.md file with project structure and key files
 */
async function generateIndex() {
  const projectRoot = process.cwd();
  const indexPath = path.join(projectRoot, 'INDEX.md');
  
  console.log('Generating INDEX.md...');
  
  const content = `# AuthenTcare Suite - Project Index

Generated on: ${new Date().toISOString()}

## Project Overview

AuthenTcare Suite is an Electron-based desktop application for managing medical device regulatory compliance and client projects.

## Key Technologies

- **Frontend**: React 18, CSS Modules
- **Backend**: Electron, Node.js
- **Database**: SQLite with FTS5
- **Build**: Webpack, Babel
- **Testing**: Node.js built-in test runner

## Project Structure

\`\`\`
AuthenTcareSuite/
├── src/
│   ├── main.js                 # Electron main process
│   ├── preload.js             # Preload script for IPC
│   ├── renderer/              # React frontend
│   │   ├── components/        # React components
│   │   ├── context/           # React context providers
│   │   ├── hooks/             # Custom React hooks
│   │   └── utils/             # Utility functions
│   ├── main/
│   │   └── ipc/              # IPC handlers
│   ├── services/             # Business logic services
│   ├── storage/
│   │   └── sqlite/           # Database migrations
│   ├── database/             # Database schema and utilities
│   ├── plugins/              # Plugin system
│   └── proAnalyser/          # Analysis tools
├── public/                   # Static assets
├── docs/                     # Documentation
├── test/                     # Test files
├── scripts/                  # Build and utility scripts
└── .github/workflows/        # CI/CD workflows
\`\`\`

## Key Files

### Core Application
- \`src/main.js\` - Electron main process entry point
- \`src/preload.js\` - Secure IPC bridge
- \`src/renderer/App.jsx\` - Main React application
- \`src/renderer/index.jsx\` - React entry point

### Database
- \`src/storage/sqlite/migrate.js\` - Migration runner
- \`src/storage/sqlite/migrations/\` - SQL migration files
- \`src/database/schema.js\` - Database schema definitions
- \`src/database/migrationRunner.js\` - JS-based migrations

### Services
- \`src/services/webCrawler.js\` - Web scraping service
- \`src/services/dataSync.js\` - Data synchronization
- \`src/main/ipc/handlers.js\` - IPC request handlers
- \`src/main/ipc/webCrawler.js\` - Web crawler IPC handler

### Configuration
- \`package.json\` - Project dependencies and scripts
- \`webpack.config.js\` - Build configuration
- \`.babelrc\` or babel config in package.json
- \`eslint.config.js\` - Linting configuration

### Documentation
- \`README.md\` - Project overview and setup
- \`docs/quickstart.md\` - Quick start guide
- \`docs/architecture.md\` - Architecture overview
- \`docs/adr/\` - Architecture Decision Records

### Testing
- \`test/migrate.test.js\` - Database migration tests
- \`test/webCrawler.test.js\` - Web crawler tests

### CI/CD
- \`.github/workflows/test.yml\` - Test workflow
- \`.github/workflows/codeql.yml\` - Security analysis
- \`.github/workflows/electronegativity.yml\` - Electron security scan

## Available Scripts

- \`npm start\` - Start development server
- \`npm run build\` - Build for production
- \`npm run start:prod\` - Start production build
- \`npm test\` - Run tests
- \`npm run test:ci\` - Run tests with CI reporter
- \`npm run migrate\` - Run database migrations
- \`npm run make:index\` - Generate this index file

## Development Workflow

1. Install dependencies: \`npm install\`
2. Run migrations: \`npm run migrate\`
3. Start development: \`npm start\`
4. Run tests: \`npm test\`
5. Build for production: \`npm run build\`

## Architecture Highlights

- **Security**: Context isolation, CSP headers, sandboxed renderer
- **Modularity**: Plugin system, modular components
- **Performance**: SQLite with FTS5, efficient React patterns
- **Maintainability**: Clear separation of concerns, comprehensive testing

## Plugin System

The application supports extensible plugins through:
- Base plugin classes in \`src/plugins/\`
- Plugin registry for lifecycle management
- Event-driven communication
- Dynamic loading capabilities

## Database Features

- SQLite with WAL mode for concurrency
- Full-text search with FTS5
- Migration system for schema evolution
- Comprehensive indexing for performance

---

*This index was automatically generated by \`scripts/make-index.mjs\`*
`;

  await fs.writeFile(indexPath, content, 'utf8');
  console.log('✓ INDEX.md generated successfully');
}

// Run the generator
generateIndex().catch(console.error);